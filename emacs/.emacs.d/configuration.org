#+TITLE: Emacs Configuration
  This an org mode file that documents my emacs config. The code within is extracted and run by .emacs
* Package Manager (use-package)
https://www.reddit.com/r/emacs/comments/cdf48c/failed_to_download_gnu_archive/
#+BEGIN_SRC emacs-lisp
; (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
(unless (package-installed-p 'use-package)
    (package-refresh-contents)
        (package-install 'use-package))
(eval-when-compile
    (require 'use-package))
#+END_SRC

* Visual Tweaks
#+BEGIN_SRC emacs-lisp :results none
(use-package rainbow-mode :ensure t)
#+END_SRC
** Emacs vanilla changes
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
    inhibit-startup-message t
    inhibit-startup-echo-area-message t)
(menu-bar-mode -1)
(tool-bar-mode -1)

(when (boundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
(show-paren-mode 1)
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
(setq-default left-fringe-width nil)
(setq-default indicate-empty-lines t)
#+END_SRC
*** Whitesapce
#+BEGIN_SRC emacs-lisp
;(setq whitespace-style (quote (face trailing tabs empty)))
;(global-whitespace-toggle-options)
#+END_SRC
** Displays
#+BEGIN_SRC emacs-lisp
(use-package powerline
    :ensure t
    :config
    (powerline-default-theme)
    )
(use-package git-gutter-fringe :ensure t)
#+END_SRC
* Backups, auto save
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
    `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
    `((".*" ,temporary-file-directory t)))
#+END_SRC
* Evil Mode
#+BEGIN_SRC emacs-lisp
(use-package evil
    :ensure t
    :config
    (dolist (mode '(ag-mode
	flycheck-error-list-mode
	git-rebase-mode))
    (add-to-list 'evil-emacs-state-modes mode))
    (evil-define-key 'normal global-map (kbd "C-u") 'evil-scroll-up)
    (evil-global-set-key 'normal (kbd "j") 'evil-next-visual-line)
    (evil-global-set-key 'normal (kbd "k") 'evil-previous-visual-line)
    (evil-mode 1)
)
#+END_SRC

** Disable clipboard on select
#+BEGIN_SRC emacs-lisp
    (setq x-select-enable-clipboard nil)
#+END_SRC
* Org Mode
** Syntax highlighting on all these inline source blocks
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
** Run all kinds of code
   [[http://orgmode.org/manual/Languages.html][languages list]]
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
      'org-babel-load-languages
      '(
        (python . t)
        (dot . t)
        (css . t)
        (calc . t)
        (js . t)
        (org . t)
        (perl . t)
        (shell . t)
        (plantuml . t)
))
(setq org-plantuml-jar-path
    (expand-file-name "~/util/plantuml.jar"))
#+END_SRC
*** test

** Visual Settings
Auto indent and minimize bullets
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
(use-package ox-twbs :ensure t)
(use-package htmlize :ensure t)
#+END_SRC
** Misc
Add the custom drawername "DRAWER" (broke with org 9.0)

Allow dates before 1970 (nice for D&D story dates). May cause issues on systems that can't support these dates.
#+BEGIN_SRC emacs-lisp
(setq org-read-date-force-compatible-dates nil)
#+END_SRC
* Indentation
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode t)
(setq-default tab-width 4)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
(defvaralias 'js-indent-level 'tab-width)
#+END_SRC
* Line wrapping
#+BEGIN_SRC emacs-lisp :results none
(setq-default truncate-lines t)
(setq-default word-wrap t)
#+END_SRC
* Folding
Not all of the fold behaviors are consistent with vim. Seems like case insensitivity on z commands, e.g. z R vs z r
#+BEGIN_SRC emacs-lisp :results none
(use-package origami
:ensure t
:diminish origami-mode
:config
    (define-key evil-normal-state-map (kbd "z v") 'origami-show-node)
    (define-key evil-normal-state-map (kbd "z V") 'origami-show-only-node)
    (global-origami-mode)
)
#+END_SRC
* Linting
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :diminish flycheck-mode
  :config
  (global-flycheck-mode)
  (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))
  (setq-default flycheck-temp-prefix ".flycheck")
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (setq-default flycheck-disabled-checkers
      (append flycheck-disabled-checkers
          '(javascript-jshint)))
  (setq-default flycheck-disabled-checkers
      (append flycheck-disabled-checkers
          '(json-jsonlist)))
  ;; use local eslint from node_modules before global
  ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
  (defun my/use-eslint-from-node-modules ()
      (let* ((root (locate-dominating-file
                      (or (buffer-file-name) default-directory)
                      "node_modules"))
              (eslint (and root
                          (expand-file-name "node_modules/eslint/bin/eslint.js"
                                              root))))
          (when (and eslint (file-executable-p eslint))
          (setq-local flycheck-javascript-eslint-executable eslint))))
  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
)
#+END_SRC
* File Finding
** Projectile + Helm
#+BEGIN_SRC emacs-lisp
(use-package projectile
:ensure t
:diminish projectile-mode
:config
(setq projectile-project-search-path '("~/src"))
)
(use-package helm
  :ensure t
  :diminish helm-mode
  :commands helm-mode
  :config
  (helm-mode 1)
  (setq helm-buffers-fuzzy-matching t)
  (setq helm-autoresize-mode t)
  (setq helm-buffer-max-length 40)
  (evil-define-key 'normal global-map (kbd "C-;") 'helm-M-x)
  )
(use-package helm-ag
:ensure t
:config
    (custom-set-variables
    '(helm-ag-base-command "rg --no-heading"))
)
(use-package helm-projectile
:ensure t
:config
    (helm-projectile-on)
    ;;;(global-unset-key (kbd "s-p")) 
    (define-key evil-normal-state-map (kbd "C-p") 'projectile-commander)

    ;;; fix for extra ignore flag which helm-projectile adds by mistake
    (defun helm-projectile-ag (&optional options)
    "Helm version of projectile-ag."
    (interactive (if current-prefix-arg (list (read-string "option: " "" 'helm-ag--extra-options-history))))
    (if (require 'helm-ag nil  'noerror)
        (if (projectile-project-p)
            (let ((helm-ag-command-option options)
                    (current-prefix-arg nil))
                (helm-do-ag (projectile-project-root) (car (projectile-parse-dirconfig-file))))
            (error "You're not in a project"))
        (error "helm-ag not available")))
)
#+END_SRC
*** TODO test file finding
https://stackoverflow.com/questions/35805591/how-to-use-projectile-find-test-file
* Languages
#+BEGIN_SRC emacs-lisp
(use-package css-mode :ensure t)
(use-package web-mode :ensure t)
(use-package php-mode :ensure t)
(use-package go-mode :ensure t)
(use-package csharp-mode :ensure t)
(add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tsx?$" . web-mode))
(setq web-mode-content-types-alist '(("jsx" . "\\.[jt]s[x]?\\'")))
#+END_SRC
* key binding
#+BEGIN_SRC emacs-lisp
(use-package key-chord
  :ensure t
  :config
  (defvar key-chord-two-keys-delay)
  (setq key-chord-two-keys-delay 0.5)
  (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
  (key-chord-mode 1)
)
#+END_SRC
** God mode
#+BEGIN_SRC  emacs-lisp
(use-package god-mode
:ensure t
)
(use-package evil-god-state
:ensure t
:config
(evil-define-key 'normal global-map (kbd "SPC") 'evil-execute-in-god-state)
(evil-define-key 'insert global-map (kbd "S-SPC") 'evil-execute-in-god-state)
)
#+END_SRC
** Easymotion
speed up navigation within the buffer
https://github.com/PythonNut/evil-easymotion
#+BEGIN_SRC emacs-lisp :results none
(use-package evil-easymotion
    :ensure t
    :config

    ;; similar to 'evilem-motion-find-char but does not break lines
    (evilem-make-motion evilem-motion-find-char-line #'evil-repeat-find-char
        :pre-hook (save-excursion
            (setq evil-this-type 'inclusive)
            (call-interactively #'evil-find-char))
    )
    (evilem-make-motion evilem-motion-find-char-to-line #'evil-repeat-find-char
        :pre-hook (save-excursion
            (setq evil-this-type 'inclusive)
            (call-interactively #'evil-find-char-to))
    )
    (evilem-make-motion evilem-motion-find-char-to-backward-line #'evil-repeat-find-char
        :pre-hook (save-excursion
            (setq evil-this-type 'inclusive)
            (call-interactively #'evil-find-char-to-backward))
    )
    (evilem-make-motion evilem-motion-find-char-backward-line #'evil-repeat-find-char
        :pre-hook (save-excursion
            (setq evil-this-type 'inclusive)
            (call-interactively #'evil-find-char-backward))
    )
    (evil-global-set-key 'normal (kbd "f") 'evilem-motion-find-char-line)
    (evil-global-set-key 'normal (kbd "t") 'evilem-motion-find-char-to-line)
    (evil-global-set-key 'normal (kbd "F") 'evilem-motion-find-char-backward-line)
    (evil-global-set-key 'normal (kbd "T") 'evilem-motion-find-char-to-backward-line)
    (evil-global-set-key 'normal (kbd "DEL") evilem-map)
)
#+END_SRC
* ETC
#+BEGIN_SRC emacs-lisp :results none
;; (server-start)

(use-package yasnippet
  :ensure t
  :diminish yas-mode
  :config
  (yas-global-mode 1)
  (setq yas-snippet-dirs '(
    "~/emacs.d/snippets"
  ))
)

(use-package exec-path-from-shell
  :if (eq system-type 'darwin)
  :ensure t
  :config
  (exec-path-from-shell-initialize)
)




(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 
 ;; TODO select a theme, Leuven is cool with the font changes for org mode, a dark version would be good
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(custom-enabled-themes (quote (wombat)))
 '(package-selected-packages (quote (fiplr web-mode use-package evil))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC
